import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;

public class PuzzleFrame extends JFrame {
	PuzzleModel pModel;
	PuzzlePanel[][] pPanel;
	JLayeredPane gamePanel;
	JPanel extraPanel;
	int n;

	public PuzzleFrame(String dim) {
		int counter = 0;
		for (int i = 0; i < dim.length(); i++) {
			if (Character.isDigit(dim.charAt(i))) {
				counter++;
			}
		}
	
		if (counter < dim.length()) {
			JOptionPane.showMessageDialog(null, "Invalid input", "Inane warning", JOptionPane.WARNING_MESSAGE);
		} else {
			n = Integer.parseInt(dim);
			if (n < 3 || n > 100) {
				JOptionPane.showMessageDialog(null, "Invalid grid size", "Inane warning", JOptionPane.WARNING_MESSAGE);
		}
		
		this.pModel = new PuzzleModel(this);
		pPanel = new PuzzlePanel[n][n];
		gamePanel = new JLayeredPane();
		extraPanel = new JPanel();
		
		GridLayout gridLayout = new GridLayout(n, n);
		gamePanel.setLayout(gridLayout);
		
		this.add(gamePanel);
		this.add(extraPanel, "North");
		
		int value = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				pPanel[i][j] = new PuzzlePanel(this, 600 / n, 600 / n);
				pPanel[i][j].pLabel.setText("" + (value + 1));
				this.getContentPane().add(pPanel[i][j]);
				value++;
				pPanel[i][j].setBackground(new Color(77, 176, 230));
				pPanel[i][j].setBorder(BorderFactory.createLineBorder(Color.WHITE));

			}

		}
		
		/*pPanel[0][0].pLabel.setText("2");
		pPanel[0][1].pLabel.setText("3");
		pPanel[0][2].pLabel.setText("1");*/
		pPanel[n - 1][n - 1].pLabel.setText("");
		pPanel[n - 1][n - 1].setBackground(Color.WHITE);

		pModel.shuffle();
		PuzzleListener listener = new PuzzleListener(pModel, this);
		this.addKeyListener(listener);
		
		this.setVisible(true);
		this.setTitle("15-puzzle");
		this.pack();
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}
